name: CI
on:
  push:
    branches:
      - main

  pull_request:
    branches:
      - main

permissions:
  actions: write

jobs:
  build:
    runs-on: ${{ matrix.runs-on }}

    strategy:
      matrix:
        include:
          - system: x86_64-linux
            runs-on: ubuntu-24.04
          - system: aarch64-linux
            runs-on: ubuntu-24.04-arm

    steps:
      - name: Configure git
        run: |
          git config --global core.autocrlf false
          git config --global core.symlinks true
          git config --global fetch.parallel 32

      - uses: actions/checkout@v4

      - name: Install Nix
        uses: nixbuild/nix-quick-install-action@v32
        with:
          nix_conf: |
            keep-env-derivations = true
            keep-outputs = true

      - uses: nix-community/cache-nix-action@v6
        with:
          # restore and save a cache using this key
          primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix', 'flake.lock') }}
          # if there's no cache hit, restore a cache by this prefix
          restore-prefixes-first-match: nix-${{ runner.os }}-
          # collect garbage until Nix store size (in bytes) is at most this number
          # before trying to save a new cache
          # 1 GB = 1073741824 B
          gc-max-store-size-linux: 1073741824
          # do purge caches
          purge: true
          # purge all versions of the cache
          purge-prefixes: nix-${{ runner.os }}-
          # created more than this number of seconds ago relative to the start of the `Post Restore` phase
          purge-created: 0
          # except the version with the `primary-key`, if it exists
          purge-primary-key: never

      - name: Show flake
        run: nix flake show

      - name: Check flake
        run: nix flake check
